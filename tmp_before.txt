# src/Modules/IslandFilter.py
from __future__ import annotations
from typing import Set
from Modules.General import get_island_context, safe_name

def _ctx() -> dict:
    """Current island context set by IslandChecker/analyzer or the GUI."""
    return get_island_context() or {}

def _union(sets: list[Set[str]]) -> Set[str]:
    out: Set[str] = set()
    for s in sets:
        out |= set(s)
    return out

def allowed_buses() -> Set[str]:
    """
    Buses that are kept in the export.
    Rules:
      - If bus_to_island has already been reduced to one island (GUI’s “activate island”),
        keep *only* those buses, minus any in bad_buses.
      - Else (no specific island activated), keep the union of all islands that have a slack
        (i.e., islands that have a voltage source). This is derived from slack_per_island.
    """
    c = _ctx()
    b2i = dict(c.get("bus_to_island", {}))  # {bus_base: island_id}
    bad = set(c.get("bad_buses", set()))    # buses to purge
    if b2i:
        return set(b2i.keys()) - bad

    # No “active island” filter was applied; keep all sourceful islands
    islands = {int(i): set(v) for i, v in dict(c.get("islands", {})).items()}
    slack_per_island = dict(c.get("slack_per_island", {}))  # sourceful islands only
    keep_sets = [islands[i] for i in islands if i in slack_per_island]
    return _union(keep_sets) - bad

def is_bus_allowed(bus_base: str | None) -> bool:
    b = safe_name(bus_base)
    if not b:
        return False
    return b in allowed_buses()

def should_comment_bus(bus_base: str | None) -> bool:
    """Comment a single-terminal device if its bus is not allowed."""
    return not is_bus_allowed(bus_base)

def should_comment_branch(from_bus: str | None, to_bus: str | None) -> bool:
    """Comment a 2-terminal device if EITHER endpoint isn’t allowed."""
    return (not is_bus_allowed(from_bus)) or (not is_bus_allowed(to_bus))

def should_comment_3w(b1: str | None, b2: str | None, b3: str | None) -> bool:
    """Comment a 3-terminal device if ANY endpoint isn’t allowed."""
    return (not is_bus_allowed(b1)) or (not is_bus_allowed(b2)) or (not is_bus_allowed(b3))

